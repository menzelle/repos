@*<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport"
          content="initial-scale=1,maximum-scale=1,user-scalable=no" />
    <title>Custom widgets with Vue - 4.12</title>
    <link rel="stylesheet"
          href="https://js.arcgis.com/4.12/esri/themes/light/main.css" />
    <style>

        html,
        body,
        #viewDiv {
            padding: 0;
            margin: 0;
            height: 100%;
            width: 100%;
        }

        #info {
            padding: 1em;
        }
    </style>
    <script>
        window.dojoConfig = {
            packages: [
                {
                    name: "vue",
                    location: "https://unpkg.com/vue/dist/",
                    main: "vue"
                }
            ]
        };
    </script>
    <script src="https://js.arcgis.com/4.12/"></script>

    <script>
      require([
        "esri/Map",
        "esri/views/SceneView",
        "esri/core/watchUtils",
        "vue"
      ], function(Map, SceneView, watchUtils, Vue) {
        const map = new Map({
          basemap: "hybrid",
          ground: "world-elevation"
        });

        const initialCamera = {
          position: [7.654, 45.919, 5184],
          tilt: 80,
          heading: 0
        };

        const view = new SceneView({
          container: "viewDiv",
          map: map,
          camera: initialCamera
        });

        // Create a Vue component
        Vue.component("camera-info", {
          props: ["camera"],
          template: [
            "<div>",
            "<h2>Camera Details</h2>",
            "<p><strong>Heading</strong>: {{ camera.heading.toFixed(3) }}</p>",
            "<p><strong>Tilt</strong>: {{ camera.tilt.toFixed(3) }}</p>",
            "<p><strong>Latitude</strong>: {{ camera.position.latitude.toFixed(3) }}</p>",
            "<p><strong>Longitude</strong>: {{ camera.position.longitude.toFixed(3) }}</p>",
            "<button v-on:click='reset'>Reset Camera</button>",
            "</div>"
          ].join(""),
          methods: {
            reset: function() {
              var camera = this.camera.clone();
              camera.set(initialCamera);
              view.goTo(camera);
            }
          }
        });

        view.when(function() {
          const info = new Vue({
            el: "#info",
            data: {
              camera: view.camera
            }
          });
          view.ui.add(info.$el, "top-right");
          watchUtils.watch(view, "camera", function() {
            info.camera = view.camera;
          });
        });
      });
    </script>
</head>

<body>
    <div id="info" class="esri-widget">
        <camera-info v-bind:camera="camera"></camera-info>
    </div>
    <div id="viewDiv"></div>
</body>
</html>*@

    <html>
    <head>
        <meta charset="utf-8">
        <meta name="viewport" content="initial-scale=1, maximum-scale=1, user-scalable=no">
        <title>ArcGIS JavaScript Tutorials: Get a route and directions</title>
        <style>
            html, body, #viewDiv {
                padding: 0;
                margin: 0;
                height: 100%;
                width: 100%;
            }
        </style>

        <link rel="stylesheet" href="https://js.arcgis.com/4.12/esri/css/main.css">
        <script src="https://js.arcgis.com/4.12/"></script>

        <script>
            require([
                "esri/Map",
                "esri/views/MapView",
                "esri/Graphic",
                "esri/tasks/RouteTask",
                "esri/tasks/support/RouteParameters",
                "esri/tasks/support/FeatureSet"
            ], function (Map, MapView, Graphic, RouteTask, RouteParameters, FeatureSet) {

                var map = new Map({
                    basemap: "streets-navigation-vector"
                });

                var view = new MapView({
                    container: "viewDiv",
                    map: map,
                    center: [-118.24532, 34.05398],
                    zoom: 12
                });

                // To allow access to the route service and prevent the user from signing in, do the Challenge step in the lab to set up a service proxy

                var routeTask = new RouteTask({
                    url: "https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World"
                });

                view.on("click", function (event) {
                    if (view.graphics.length === 0) {
                        addGraphic("start", event.mapPoint);
                    } else if (view.graphics.length === 1) {
                        addGraphic("finish", event.mapPoint);
                        // Call the route service
                        getRoute();
                    } else {
                        view.graphics.removeAll();
                        addGraphic("start", event.mapPoint);
                    }
                });

                function addGraphic(type, point) {
                    var graphic = new Graphic({
                        symbol: {
                            type: "simple-marker",
                            color: (type === "start") ? "white" : "black",
                            size: "8px"
                        },
                        geometry: point
                    });
                    view.graphics.add(graphic);
                }

                function getRoute() {
                    // Setup the route parameters
                    var routeParams = new RouteParameters({
                        stops: new FeatureSet({
                            features: view.graphics.toArray()
                        }),
                        returnDirections: true
                    });
                    // Get the route
                    routeTask.solve(routeParams).then(function (data) {
                        data.routeResults.forEach(function (result) {
                            result.route.symbol = {
                                type: "simple-line",
                                color: [5, 150, 255],
                                width: 3
                            };
                            view.graphics.add(result.route);
                        });


                            // Display the directions
          var directions = document.createElement("ol");
          directions.classList = "esri-widget esri-widget--panel esri-directions__scroller";
          directions.style.marginTop = 0;
          directions.style.paddingTop = "15px";

          // Show the directions
          var features = data.routeResults[0].directions.features;
          features.forEach(function(result,i){
            var direction = document.createElement("li");
            direction.innerHTML = result.attributes.text + " (" + result.attributes.length.toFixed(2) + " miles)";
            directions.appendChild(direction);
          });

          // Add directions to the view
          view.ui.empty("top-right");
          view.ui.add(directions, "top-right");

                    });
                }

            });
        </script>
    </head>
    <body>
        <div id="viewDiv"></div>
    </body>
    </html>